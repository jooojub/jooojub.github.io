{
 "content": "\n\n#### Requires\n: compiler: gcc 3.3 later\n***\n\nIf you use <mark>nonnull attribute</mark>, you can detect at compile-time when NULL is used in a function that `should not pass NULL` as a function argument.\n\nHowever, It is detected only if NULL is specified as implicitly. \nTherefore, there is a limit that it cannot detect a situation where it is not.\nThese limitations will be discussed in more detail later.\n\nThis attribute is meaningful only when used with the <mark>-Wnonnull</mark> or <mark>-Werror=nonnull</mark> compile options.\nUsing <mark>-Wno-nonnull</mark> makes it meaningless to use <mark>nonnull attribute</mark> it on purpose.\n\n<mark>nonnull</mark> was first introduced in the gcc-3.3 release note, and is used in many open-sources such as kernel and glibc.\n\n> #### GCC 3.3 Changes\n> <b>C/ObjC/C++</b>\n> ...\n> A new function attribute, <b>nonnull</b>,has been added which allows pointerarguments to functions to be specified asrequiring a non-null value. The compilercurrently uses this information to issue awarning when it detects a null value passedin such an argument slot.<br>\n> **ref:&nbsp;**<a target=\"_blank\" href=\"https://gcc.gnu.org/gcc-3.3/changes.html\"><code>https://gcc.gnu.org/gcc-3.3/changes.html</code></a></cite>\n\nMore details are kindly given in the gcc documentation.\n\n\n\n> #### gcc 7.3/Common-Function-Attributes/nonnull\n> <b>nonnull (arg-index, …)</b><br>\n> The nonnull attribute specifies that some function parameters should be non-null pointers. For instance, the declaration:<br><br>\n> <pre><code>extern void *\n>    my_memcpy (void *dest, const void *src, size_t len)\n>    __attribute__((nonnull (1, 2)));</code></pre>\n> causes the compiler to check that, in calls to my_memcpy, arguments dest and src are <mark>non-null</mark>.\n> If the compiler determines that a <b>null pointer is passed in an argument slot marked as non-null</b>, and the <mark>-Wnonnull</mark> option is enabled, a warning is issued.\n> The compiler may also choose to make optimizations based on the knowledge that certain function arguments will never be null.<br>\n> If no argument index list is given to the nonnull attribute, all pointer arguments are marked as non-null. To illustrate, the following declaration is equivalent to the previous example:<br><br>\n> <pre><code>extern void *\n>    my_memcpy (void *dest, const void *src, size_t len)\n>    __attribute__((nonnull));</pre></code>\n> **ref:&nbsp;**<a target=\"_blank\" href=\"https://gcc.gnu.org/gcc-3.3/changes.html\"><code>https://gcc.gnu.org/gcc-3.3/changes.html</code></a></cite>\n\nBecause it is a simple attribute, you can be understood with a simple sample code.\nThe important thing is that the argument index list is `1-based`, not 0-based.\n\n```c \n: sample source code - nonnull.c\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid __attribute__((nonnull(1, 2)))\n  my_test_function(char *dest, const char *src, int len) {\n\tstrncpy(dest, src, len);\n}\n\nint main(void) {\n\tmy_test_function(NULL, NULL, 10);\n\n\treturn 0;\n}\n```\n\nIn my_test_function(), I specified that `dest` and `src` must not be `NULL`.\n\n```bash\n: result\n$ gcc -Wnonnull nonnull.c\n\nnonnull.c: In function ‘main’:\nnonnull.c:11:2: warning: null argument where non-null required\n\t\t\t\t\t\t\t\t\t\t(argument 1) [-Wnonnull]\n  my_test_function(NULL, NULL, 10);\n  ^~~~~~~~~~~~~~~~\nnonnull.c:11:2: warning: null argument where non-null required\n\t\t\t\t\t\t\t\t\t\t(argument 2) [-Wnonnull]\n```\nThe compiler kindly gave me a warning message saying that arguments 1 and 2 should not be NULL.\n\nCompile warnings can sometimes be overlooked by mistake, so it is better to change them to errors so that compilation fails.\n\n```bash\n: change to error with -Werror=\n$ gcc -Werror=nonnull nonnull.c\n\nnonnull.c: In function ‘main’:\nnonnull.c:11:2: error: null argument where non-null required\n\t\t\t\t\t\t\t\t\t\t(argument 1) [-Werror=nonnull]\n  my_test_function(NULL, NULL, 10);\n  ^~~~~~~~~~~~~~~~\nnonnull.c:11:2: error: null argument where non-null required\n\t\t\t\t\t\t\t\t\t\t(argument 2) [-Werror=nonnull]\ncc1: some warnings being treated as errors\n```\n\nImportantly, just because you use a <mark>nonnull attribute</mark> doesn't mean you don't need to check for NULL in my_test_function().\nThis attribute only works in predictable situations at compile-time.\nIt is a limitation of compile-time detection and in a way it is a natural limitation.\n\n\n```c\n: can not detect for the following situations\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid __attribute__((nonnull(1, 2)))\n\t\tmy_test_function(char *dest, const char *src, int len) {\n\tstrncpy(dest, src, len);\n}\n\nint main(void) {\n\tchar *a = NULL;\n\n\tmy_test_function(a, \"test\", 5);\n\n\treturn 0;\n}\n```\na is `null` but the build succeeds.\n```bash\n: result\n$ gcc -Werror=nonnull nonnull.c\n/* build success! */\n```\n\nAlthough the above situation is NULL, which is sufficiently predictable from the point of view of the compiler, it cannot be detected... hmm\n\nWhen using <mark>nonnull attribute</mark>, if argument index list is not provided, nonnull check is performed for all arguments.\n\n```c\n: use without argument index list\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid __attribute__((nonnull))\n\t\tmy_test_function(char *dest, const char *src, int len) {\n\tstrncpy(dest, src, len);\n}\n\nint main(void) {\n\tmy_test_function(NULL, NULL, 5);\n\n\treturn 0;\n}\n```\n```bash\n: result - build fail\n$ gcc -Werror=nonnull nonnull.c\nnonnull.c: In function ‘main’:\nnonnull.c:11:2: error: null argument where non-null required\n\t\t\t\t\t\t\t\t\t\t(argument 1) [-Werror=nonnull]\n  my_test_function(NULL, NULL, 10);\n  ^~~~~~~~~~~~~~~~\nnonnull.c:11:2: error: null argument where non-null required\n\t\t\t\t\t\t\t\t\t\t(argument 2) [-Werror=nonnull]\ncc1: some warnings being treated as errors\n```\n\nAlthough there is a limit to detection, the possibility of detecting user mistakes at compile-time seems to be a big advantage.\n\nCompiler attribute has no `runtime overhead`, so I plan to make a lot of use of these `attributes`."
}