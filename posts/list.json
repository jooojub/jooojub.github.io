[
 {
  "file": "2019-06-16-gcc-attribute-cleanup",
  "title": "gcc attribute: cleanup",
  "tags": "gcc_attribute",
  "date": "2019-06-16",
  "description": "The cleanup attribute runs a function when the variable goes out of scope. This attribute can only be applied to auto function scope variables."
 },
 {
  "file": "2019-06-30-NULL",
  "title": "NULL != 0",
  "tags": "GNUC",
  "date": "2019-06-30",
  "description": "As we can see from the results of pre-process, `NULL` was replace by ((void *)0)"
 },
 {
  "file": "2019-07-01-gcc-attribute-nonnull",
  "title": "gcc attribute: nonnull",
  "tags": "gcc_attribute",
  "date": "2019-07-01",
  "description": "A new function attribute, nonnull, has been added which allows pointer arguments to functions to be specified as requiring a non-null value."
 },
 {
  "file": "2019-07-03-gcc-options-fsigned-char",
  "title": "gcc options: -fsigned-char",
  "tags": "gcc_options",
  "date": "2019-07-03",
  "description": "These options control whether a bit-field is signed or unsigned, when the declaration does not use either signed or unsigned. By default, such a bit-field is signed, because this is consistent: the basic integer types such as int are signed types."
 },
 {
  "file": "2019-08-04-gcc-builtin-alloca",
  "title": "gcc builtin: alloca",
  "tags": "gcc_builtin",
  "date": "2019-08-04",
  "description": "The alloca() function allocates size bytes of space in the stack frame of the caller.  This temporary space is automatically freed when the function that called alloca() returns to its caller."
 },
 {
  "file": "2019-09-15-gcc-builtin_choose_expr",
  "title": "gcc builtin: choose_expr",
  "tags": "gcc_builtin",
  "date": "2019-09-15",
  "description": "You can use the built-in function __builtin_choose_expr to evaluate code depending on the value of a constant expression. This built-in function returns exp1 if const_exp, which is an integer constant expression, is nonzero. Otherwise it returns exp2."
 },
 {
  "file": "2020-11-28-gcc-options-format",
  "title": "gcc options: -Wformat",
  "tags": "gcc_options",
  "date": "2020-11-28",
  "description": "Check calls to printf and scanf, etc., to make sure that the arguments supplied have types appropriate to the format string specified, and that the conversions specified in the format string make sense."
 },
 {
  "file": "2020-12-06-gcc-attribute-format",
  "title": "gcc attribute: format, format_arg",
  "tags": "gcc_attribute",
  "date": "2020-12-06",
  "description": "The format attribute specifies that a function takes printf, scanf, strftime or strfmon style arguments which should be type-checked against a format string."
 },
 {
  "file": "2021-12-05-gcc-attribute-constructor-destructor",
  "title": "gcc attribute: constructor and destructor",
  "tags": "gcc_attribute",
  "date": "2021-12-05",
  "description": "gcc provides a constructor that can be executed before the main function and descturtor that can be executed after the main function. If you use it well, you can make a hooking library and use it for debugging, etc."
 }
]